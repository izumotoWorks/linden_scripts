//=============================================================================
// HUD de Alpha変更　Toggle式 トランスミッター用スクリプト v0.1.1
// ----------------------------------------------------------------------------
// (C)2021 Enhanced System
// This software is released under the MIT License.
// http://opensource.org/licenses/mit-license.php
// ----------------------------------------------------------------------------
// Version
// 0.1.1 2021/05/20 範囲判定関数化＆２つの範囲を作成
// 0.1.0 2021/05/20 β版
// ----------------------------------------------------------------------------
// [GitHub] : https://github.com/izumotoWorks/linden_scripts
//=============================================================================

// ----------------------------------------------------------------------------
// 定数定義　
// ----------------------------------------------------------------------------
float C_VISIBLE = 1.000000; // 不透明度
float C_HIDE = 0.000000; // 透明度

// 送信するチャンネル
//integer SEND_CHANNEL  = -112010; // 値を変更する際はレシーバー側も変更する必要あり
//integer SEND_CHANNEL  = -112011; // 値を変更する際はレシーバー側も変更する必要あり
integer SEND_CHANNEL  = -112012; // 値を変更する際はレシーバー側も変更する必要あり

// 受信するチャンネル
integer LISTEN_CHANNEL = -113010; // 白黒から受け取るチャンネル


// ----------------------------------------------------------------------------
// 変数定義　
// ----------------------------------------------------------------------------
// 透明フラグ
integer alpha_flag = 1;

key obj_uuid; // UUID用
string obj_name; // 名前用
integer listen_handle; // リッスンハンドラ


// ----------------------------------------------------------------------------
// 自作関数群
// ----------------------------------------------------------------------------
// アルファ値を反転させる
float nl_toggle_alpha() {
    if(alpha_flag == 1)  {
        alpha_flag = -1;
        return C_HIDE;
    } else {
        alpha_flag = 1;
        return C_VISIBLE;
    }
}


// ----------------------------------------------------------------------------
// メイン関数
// ----------------------------------------------------------------------------

default
{
    // 開始時に始動
    state_entry() {
        obj_uuid = NULL_KEY; //llGetOwner(); // 装着物のUUIDを指定すると動作しないのでオーナーのUUIDにしている
        obj_name = ""; //llGetObjectName(); // 負荷が高く感じた場合名前の指定もする(現在未使用)

        // 指定チャネル + 指定名で　指定UUIDのプリムに対してリッスンする
        listen_handle = llListen(LISTEN_CHANNEL, obj_name, obj_uuid, "");
    }


    // タッチされ終わったら動く関数
    touch_end(integer total_number)
    {
        // アルファを反転させる
        float now_alpha = nl_toggle_alpha();

        // レシーバーにタッチした値を送信する(同じチャンネルリッスン且つ10m以内の対象に送信)
        llWhisper( SEND_CHANNEL, (string)now_alpha);
    }

    // 全表示or全隠しオブジェクトからチャネルに受信したら動作
    listen( integer channel, string name, key id, string message )
    {
        // 不透明にする命令がきたら
        if(message == (string)C_VISIBLE) {
            // レシーバーにタッチした値を送信する(同じチャンネルリッスン且つ10m以内の対象に送信)
            llWhisper( SEND_CHANNEL, (string)C_VISIBLE);
            // 透明フラグを問答無用に不透明に
            alpha_flag = 1;
        // 透明にする命令がきたら
        } else if(message == (string)C_HIDE) {
            // レシーバーにタッチした値を送信する(同じチャンネルリッスン且つ10m以内の対象に送信)
            llWhisper( SEND_CHANNEL, (string)C_HIDE);
            // 透明フラグを問答無用に不透明に
            alpha_flag = -1;
        }
    }
}
